name: hotfix-release

on:
  push:
    branches:
      - hotfix/*

jobs:
  hotfix-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.COMMIT_KEY }}

      - name: tag hotfix
        id: hotfix
        run: |
          set -ex

          git fetch --force --tags
          latest_tag=$(
            git describe --abbrev=0 --match "v*.*.*+hotfix.*" 2>/dev/null ||
            git describe --abbrev=0 --match "v*.*.*" 2>/dev/null ||
            true
          )

          # Latest tag is a production release. New tag will be the first hotfix release
          if echo "$latest_tag" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]$'; then
            new_tag=${latest_tag}+hotfix.0
          fi

          # Latest tag is a hotfix release. New tag will be the incremented hotfix release
          if echo "$latest_tag" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]\+hotfix.[0-9]+$'; then
            latest_hotfix_version=$(echo "$latest_tag" | rev | cut -d. -f1 | rev)
            new_hotfix_version=$(($latest_hotfix_version + 1))
            new_tag=${latest_tag%.*}.${new_hotfix_version}
          fi

          if [ -z "${new_tag}" ]; then
            echo Failed to calculate new version tag.
            exit 1
          fi

          # Create Git tag and push it to origin
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "${tag}" -m "${tag}"
          git push origin "${tag}"

          echo "tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          body: |
            Hotfix ${{ steps.hotfix.outputs.tag }}
          name: ${{ steps.hotfix.outputs.tag }}
          tag: ${{ steps.hotfix.outputs.tag }}
